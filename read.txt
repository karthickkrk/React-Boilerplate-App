üõ†Ô∏è Add TypeScript to React + Webpack + Babel
1. Install TypeScript & dependencies
npm install --save-dev typescript ts-loader @babel/preset-typescript
npm install --save-dev @types/react @types/react-dom

2. Create tsconfig.json

In your project root:

{
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "lib": ["DOM", "ESNext"],
    "jsx": "react-jsx",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["src"]
}

3. Update webpack.config.js

Modify your rules to handle .ts and .tsx:

module.exports = {
  entry: "./src/index.tsx",
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "bundle.js",
    clean: true,
  },
  module: {
    rules: [
      {
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,
        use: "ts-loader", // or babel-loader with @babel/preset-typescript
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
    ],
  },
  resolve: {
    extensions: [".ts", ".tsx", ".js", ".jsx"],
  },
  ...
};

4. Update .babelrc (optional, if using Babel for TS)
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript"
  ]
}


üëâ You can choose either:

ts-loader only

OR babel-loader with @babel/preset-typescript

(both work, but ts-loader uses TypeScript compiler, while Babel skips type-checking).

5. Rename files

src/index.js ‚Üí src/index.tsx

src/App.js ‚Üí src/App.tsx

6. Example TypeScript Component

src/App.tsx

import React from "react";

type Props = {
  name: string;
};

const App: React.FC<Props> = ({ name }) => {
  return <h1>Hello {name}, React + Webpack + TypeScript üöÄ</h1>;
};

export default App;


src/index.tsx

import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";

const root = createRoot(document.getElementById("root") as HTMLElement);
root.render(<App name="Karthick" />);

7. Update scripts in package.json
"scripts": {
  "start": "webpack serve --mode development",
  "build": "webpack --mode production"
}

8. Run it üöÄ
npm start


üëâ Now you have React + TypeScript + Webpack + Babel fully working.